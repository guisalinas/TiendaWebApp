// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TiendaWebApi.Models.Data;

namespace TiendaWebApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220629230304_Initial Migration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TiendaWebApi.Models.Entity.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.CustomerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CustomerTypes");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.PayMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PayModes");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusinessName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identifier")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.ProductInPurchaseDetail", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseDetailId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "PurchaseDetailId");

                    b.HasIndex("PurchaseDetailId");

                    b.ToTable("ProductInPurchaseDetails");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.ProductInSaleDetail", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SaleDetailId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "SaleDetailId");

                    b.HasIndex("SaleDetailId");

                    b.ToTable("ProductInSaleDetails");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.PurchaseDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseId")
                        .IsUnique();

                    b.ToTable("PurchaseDetails");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("PayModeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SaleDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PayModeId");

                    b.HasIndex("SaleDetailId")
                        .IsUnique()
                        .HasFilter("[SaleDetailId] IS NOT NULL");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.SaleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AmountDue")
                        .HasColumnType("float");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("SaleDetails");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.Address", b =>
                {
                    b.HasOne("TiendaWebApi.Models.Entity.Contact", "Contact")
                        .WithMany("AddressesList")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.Contact", b =>
                {
                    b.HasOne("TiendaWebApi.Models.Entity.Person", "Person")
                        .WithMany("ContactsList")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.Customer", b =>
                {
                    b.HasOne("TiendaWebApi.Models.Entity.CustomerType", "CustomerType")
                        .WithMany("CustomersList")
                        .HasForeignKey("CustomerTypeId");

                    b.HasOne("TiendaWebApi.Models.Entity.Person", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("TiendaWebApi.Models.Entity.Customer", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerType");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.Product", b =>
                {
                    b.HasOne("TiendaWebApi.Models.Entity.ProductType", "ProductType")
                        .WithMany("ProductsList")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.ProductInPurchaseDetail", b =>
                {
                    b.HasOne("TiendaWebApi.Models.Entity.Product", "Product")
                        .WithMany("PInPurchaseDetailList")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiendaWebApi.Models.Entity.PurchaseDetail", "PurchaseDetail")
                        .WithMany("PInPurchaseDetailList")
                        .HasForeignKey("PurchaseDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseDetail");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.ProductInSaleDetail", b =>
                {
                    b.HasOne("TiendaWebApi.Models.Entity.Product", "Product")
                        .WithMany("PInSaleDetailList")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiendaWebApi.Models.Entity.SaleDetail", "SaleDetail")
                        .WithMany("PInSaleDetailList")
                        .HasForeignKey("SaleDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SaleDetail");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.Provider", b =>
                {
                    b.HasOne("TiendaWebApi.Models.Entity.Person", "Person")
                        .WithOne("Provider")
                        .HasForeignKey("TiendaWebApi.Models.Entity.Provider", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.Purchase", b =>
                {
                    b.HasOne("TiendaWebApi.Models.Entity.Provider", "Provider")
                        .WithMany("PurchasesList")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.PurchaseDetail", b =>
                {
                    b.HasOne("TiendaWebApi.Models.Entity.Purchase", "Purchase")
                        .WithOne("PurchaseDetail")
                        .HasForeignKey("TiendaWebApi.Models.Entity.PurchaseDetail", "PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.Sale", b =>
                {
                    b.HasOne("TiendaWebApi.Models.Entity.Customer", "Customer")
                        .WithMany("SalesList")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiendaWebApi.Models.Entity.PayMode", "PayMode")
                        .WithMany("SalesList")
                        .HasForeignKey("PayModeId");

                    b.HasOne("TiendaWebApi.Models.Entity.SaleDetail", "SaleDetail")
                        .WithOne("Sale")
                        .HasForeignKey("TiendaWebApi.Models.Entity.Sale", "SaleDetailId");

                    b.Navigation("Customer");

                    b.Navigation("PayMode");

                    b.Navigation("SaleDetail");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.Contact", b =>
                {
                    b.Navigation("AddressesList");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.Customer", b =>
                {
                    b.Navigation("SalesList");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.CustomerType", b =>
                {
                    b.Navigation("CustomersList");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.PayMode", b =>
                {
                    b.Navigation("SalesList");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.Person", b =>
                {
                    b.Navigation("ContactsList");

                    b.Navigation("Customer");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.Product", b =>
                {
                    b.Navigation("PInPurchaseDetailList");

                    b.Navigation("PInSaleDetailList");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.ProductType", b =>
                {
                    b.Navigation("ProductsList");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.Provider", b =>
                {
                    b.Navigation("PurchasesList");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.Purchase", b =>
                {
                    b.Navigation("PurchaseDetail");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.PurchaseDetail", b =>
                {
                    b.Navigation("PInPurchaseDetailList");
                });

            modelBuilder.Entity("TiendaWebApi.Models.Entity.SaleDetail", b =>
                {
                    b.Navigation("PInSaleDetailList");

                    b.Navigation("Sale");
                });
#pragma warning restore 612, 618
        }
    }
}
